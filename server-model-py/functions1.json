{
    "Class Functions": {
        "MethodDataset": {
            "inheritance": [
                "Dataset"
            ],
            "functions": [
                {
                    "name": "__init__",
                    "body": "def __init__(self, tokenizer, args, file_type='train', block_size=512, mode='train'):\n        if args.local_rank==-1:\n            local_rank=0\n            world_size=1\n        else:\n            local_rank=args.local_rank\n            world_size=torch.distributed.get_world_size()\n\n        self.block_size = block_size\n        self.mode = mode\n\n        cached_file = os.path.join(args.output_dir, file_type+\"_blocksize_%d\"%(block_size)+\"_wordsize_%d\"%(world_size)+\"_rank_%d\"%(local_rank))\n        if mode != 'test' and os.path.exists(cached_file) and not args.overwrite_cache:\n            if file_type == 'train':\n                logger.warning(\"Loading features from cached file %s\", cached_file)\n            with open(cached_file, 'rb') as handle:\n                data = pickle.load(handle)\n                self.inputs = data['inputs']\n                self.token_labels = data['token_labels']\n\n        else:\n            self.inputs = []\n            self.token_labels = []\n\n            datafile = os.path.join(args.data_dir, f\"{file_type}.jsonl\")\n            if file_type == 'train':\n                logger.info(\"Creating features from dataset file at %s\", datafile)\n            datas = open(datafile).readlines()\n\n            length = len(datas)\n            logger.info(\"Data size: %d\"%(length))\n            for idx, x in enumerate(datas):\n                if idx % (length//10) == 0:\n                    percent = idx / (length//10) * 10\n                    logger.warning(\"Rank %d, load %d\"%(local_rank, percent))\n                if idx % world_size != local_rank:\n                    continue\n                if \"valid\" in file_type and idx % 10 != 0:\n                    continue\n                x = json.loads(x)\n                code = tokenizer.encode(x[\"body\"])\n                inputs = tokenizer.encode(x[\"signature\"] + \"<EOL>\\\"\\\"\\\"\" + x[\"docstring\"] + \"\\\"\\\"\\\"<EOL>\")\n\n                input_ids, input_labels = self.pad_and_get_mask(code, inputs, tokenizer)\n                self.inputs.append(input_ids)\n                self.token_labels.append(input_labels)\n\n            if file_type == 'train':\n                logger.warning(\"Rank %d Training %d samples\"%(local_rank, len(self.inputs)))\n                logger.warning(\"Saving features into cached file %s\", cached_file)\n            if mode != 'test':\n                with open(cached_file, 'wb') as handle:\n                    pickle.dump({'inputs': self.inputs, 'token_labels': self.token_labels}, handle, protocol=pickle.HIGHEST_PROTOCOL)"
                },
                {
                    "name": "pad_and_get_mask",
                    "body": "def pad_and_get_mask(self, code, nl, tokenizer):\n        if self.mode == 'test':\n            code = []\n        while (len(code) + len(nl) + 2 > self.block_size):\n            if (len(code) > 2*len(nl)):\n                code = code[:-1]\n            else:\n                nl = nl[:-1]\n        if self.mode == 'train':\n            inputs = [tokenizer.bos_token_id] + nl + code + [tokenizer.eos_token_id]\n            labels = [1] * (len(nl)+1) + [2] * len(code) + [0]\n        else:\n            inputs = [tokenizer.bos_token_id] + nl\n            labels = [1] * (len(nl)+1)\n            return inputs, labels\n        assert len(inputs) <= self.block_size\n        pad_len = self.block_size - len(inputs)\n        inputs += [tokenizer.pad_token_id] * pad_len\n        labels += [0] * pad_len\n        assert len(inputs) == len(labels)\n        return inputs, labels"
                },
                {
                    "name": "__len__",
                    "body": "def __len__(self):\n        return len(self.inputs)"
                },
                {
                    "name": "__getitem__",
                    "body": "def __getitem__(self, item):\n        return torch.tensor(self.inputs[item]), torch.tensor(self.token_labels[item])"
                }
            ]
        }
    },
    "Non Class Functions": {
        "get_special_tokens": "def get_special_tokens(path):\n    lits = json.load(open(path))\n    tokens = [\"<EOL>\", \"<STR_LIT>\", \"<NUM_LIT>\", \"<CHAR_LIT>\", \"<INDENT>\", \"<DEDENT>\"]\n    for lit in lits[\"str\"]:\n        tokens.append(f\"<STR_LIT:{lit}>\")\n    for lit in lits[\"num\"]:\n        tokens.append(f\"<NUM_LIT:{lit}>\")\n    for lit in lits[\"char\"]:\n        tokens.append(f\"<CHAR_LIT:{lit}>\")\n    return tokens",
        "load_and_cache_examples": "def load_and_cache_examples(args, tokenizer, evaluate=False):\n    dataset = MethodDataset(tokenizer, args, logger, file_type='dev' if evaluate else 'train',\n                          block_size=args.block_size)\n    return dataset",
        "set_seed": "def set_seed(args):\n    random.seed(args.seed)\n    np.random.seed(args.seed)\n    torch.manual_seed(args.seed)\n    if args.n_gpu > 0:\n        torch.cuda.manual_seed_all(args.seed)",
        "update_config": "def update_config(model, tokenizer):\n    model.config.bos_token_id = tokenizer.bos_token_id\n    model.config.eos_token_id = tokenizer.eos_token_id\n    model.config.pad_token_id = tokenizer.pad_token_id",
        "train": "def train(args, train_dataset, model, tokenizer, fh, pool):\n    \"\"\" Train the model \"\"\"\n    args.batch_size = args.per_gpu_train_batch_size * max(1, args.n_gpu)\n    train_sampler = RandomSampler(train_dataset)\n    \n    train_dataloader = DataLoader(train_dataset, sampler=train_sampler, batch_size=args.batch_size, drop_last=True)\n    total_examples = len(train_dataset) * (\n                    torch.distributed.get_world_size() if args.local_rank != -1 else 1)\n    batch_size = args.batch_size * args.gradient_accumulation_steps * (\n                    torch.distributed.get_world_size() if args.local_rank != -1 else 1)\n    # if args.max_steps > 0:\n    #     t_total = args.max_steps\n    #     args.num_train_epochs = args.max_steps // (len(train_dataloader) // args.gradient_accumulation_steps) + 1\n    if args.num_train_epochs > 0:\n        t_total = total_examples // batch_size * args.num_train_epochs\n    args.max_steps = t_total\n    model.to(args.device)\n    if args.local_rank not in [-1, 0]:\n        torch.distributed.barrier()  \n    # Prepare optimizer and schedule (linear warmup and decay)\n    no_decay = ['bias', 'LayerNorm.weight']\n    optimizer_grouped_parameters = [\n        {'params': [p for n, p in model.named_parameters() if not any(nd in n for nd in no_decay)],\n         'weight_decay': args.weight_decay},\n        {'params': [p for n, p in model.named_parameters() if any(nd in n for nd in no_decay)], 'weight_decay': 0.0}\n    ]\n    optimizer = AdamW(optimizer_grouped_parameters, lr=args.learning_rate, eps=args.adam_epsilon)\n    scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=args.warmup_steps,\n                                                num_training_steps=t_total)\n    checkpoint_last = os.path.join(args.output_dir, 'checkpoint-last')\n    optimizer_last = os.path.join(checkpoint_last, 'optimizer.pt')\n    if os.path.exists(optimizer_last):\n        optimizer.load_state_dict(torch.load(optimizer_last, map_location=\"cpu\"))   \n    if args.local_rank == 0:\n        torch.distributed.barrier()   \n    if args.fp16:\n        try:\n            from apex import amp\n        except ImportError:\n            raise ImportError(\"Please install apex from https://www.github.com/nvidia/apex to use fp16 training.\")\n        model, optimizer = amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)\n\n    # multi-gpu training (should be after apex fp16 initialization)\n    if args.n_gpu > 1:\n        model = torch.nn.DataParallel(model)\n\n    # Distributed training (should be after apex fp16 initialization)\n    if args.local_rank != -1:\n        model = torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank%args.gpu_per_node],\n                                                          output_device=args.local_rank%args.gpu_per_node,\n                                                          find_unused_parameters=True)\n\n    # Train!\n    logger.info(\"***** Running training *****\")\n    logger.info(\"  Num examples = %d\", total_examples )\n    logger.info(\"  Num epoch = %d\", t_total*batch_size//total_examples)\n    logger.info(\"  Instantaneous batch size per GPU = %d\", args.per_gpu_train_batch_size)\n    logger.info(\"  Total train batch size (w. parallel, distributed & accumulation) = %d\", batch_size)\n    logger.info(\"  Gradient Accumulation steps = %d\", args.gradient_accumulation_steps)\n    logger.info(\"  Total optimization steps = %d\", t_total)\n    \n    global_step = args.start_step\n    tr_loss, logging_loss,avg_loss,tr_nb = 0.0, 0.0,0.0,0\n    # model.resize_token_embeddings(len(tokenizer))\n    model.zero_grad()\n    set_seed(args)  # Added here for reproducibility (even between python 2 and 3)\n\n    best_bleu = 0.0\n    \n    for idx in range(int(args.num_train_epochs)): \n        for step, (batch, token_labels) in enumerate(train_dataloader):\n            inputs = batch.to(args.device)\n            attn_mask = torch.tensor(token_labels.clone().detach() != 0, dtype=torch.uint8, device=args.device)\n            loss_mask = torch.tensor(token_labels.clone().detach() == 2, dtype=torch.uint8, device=args.device)\n            model.train()\n            # outputs = model(inputs, attention_mask=attn_mask, labels=inputs, loss_mask=loss_mask)\n            # loss = outputs[0]\n            outputs = model(inputs, attention_mask=attn_mask)\n            logits = outputs[0]\n            labels = inputs\n            shift_logits = logits[..., :-1, :].contiguous()\n            shift_labels = labels[..., 1:].contiguous()\n            # Flatten the tokens\n            loss_fct = CrossEntropyLoss()\n            flatten_shift_loss_mask = loss_mask[..., :-1].contiguous().view(-1)\n            ids = torch.nonzero(flatten_shift_loss_mask).view(-1)\n            loss = loss_fct(shift_logits.view(-1, shift_logits.size(-1))[ids], shift_labels.view(-1)[ids])\n\n            if args.n_gpu > 1:\n                loss = loss.mean()  # mean() to average on multi-gpu parallel training\n            if args.gradient_accumulation_steps > 1:\n                loss = loss / args.gradient_accumulation_steps\n\n            if args.fp16:\n                with amp.scale_loss(loss, optimizer) as scaled_loss:\n                    scaled_loss.backward()\n                torch.nn.utils.clip_grad_norm_(amp.master_params(optimizer), args.max_grad_norm)\n            else:\n                loss.backward()\n                torch.nn.utils.clip_grad_norm_(model.parameters(), args.max_grad_norm)\n\n            tr_loss += loss.item()\n                \n            if (step + 1) % args.gradient_accumulation_steps == 0:\n                optimizer.step()\n                optimizer.zero_grad()\n                scheduler.step()  \n                global_step += 1\n                output_flag=True\n                avg_loss=round(np.exp((tr_loss - logging_loss) /(global_step- tr_nb)),4)\n                if args.local_rank in [-1, 0] and global_step % args.logging_steps == 0:\n                    logger.info(f\"  steps: {global_step}  lr: {round(scheduler.get_last_lr()[0], 6)}  loss: {round(avg_loss, 5)}\")\n                    logging_loss = tr_loss\n                    tr_nb=global_step\n\n                if args.local_rank in [-1, 0] and args.save_steps > 0 and global_step % args.save_steps == 0:\n                    checkpoint_prefix = \"checkpoint\"\n                    # Save model checkpoint\n                    if args.evaluate_during_training:  # Only evaluate when single GPU otherwise metrics may not average well\n                        results = evaluate(args, model, tokenizer, eval_when_training=True)\n                        for key, value in results.items():\n                            logger.info(\"  %s = %s\", key, round(value,4))\n                        output_dir = os.path.join(args.output_dir, '{}-{}-{}'.format(checkpoint_prefix, global_step, round(results['perplexity'],4)))\n                        # dev_bleu, dev_EM = eval_bleu(args, model, tokenizer, file_type='dev', num=100)\n                        # logger.info(f\"dev bleu: {dev_bleu}, dev EM: {dev_EM}\")\n                        # output_dir = os.path.join(args.output_dir, '{}-{}-{}'.format(checkpoint_prefix, global_step, round(dev_bleu,2)))\n                        # if dev_bleu > best_bleu:\n                        #     best_bleu = dev_bleu\n                        #     logger.info(f\"best bleu updated. saved in {output_dir}\")\n                        #     logger.info(f\"best bleu: {best_bleu}\")\n                    else:\n                        output_dir = os.path.join(args.output_dir, \"{}-{}\".format(checkpoint_prefix, global_step))\n                    if not os.path.exists(output_dir):\n                        os.makedirs(output_dir)\n                    model_to_save = (\n                        model.module if hasattr(model, \"module\") else model\n                    )  # Take care of distributed/parallel training\n                    model_to_save.save_pretrained(output_dir)\n                    tokenizer.save_pretrained(output_dir)\n\n                    torch.save(args, os.path.join(output_dir, \"training_args.bin\"))\n                    logger.info(\"Saving model checkpoint to %s\", output_dir)\n\n                    # _rotate_checkpoints(args, checkpoint_prefix)\n                    last_output_dir = os.path.join(args.output_dir, 'checkpoint-last')\n                    if not os.path.exists(last_output_dir):\n                        os.makedirs(last_output_dir)\n                    model_to_save.save_pretrained(last_output_dir)\n                    tokenizer.save_pretrained(last_output_dir)\n\n                    torch.save(optimizer.state_dict(), os.path.join(last_output_dir, \"optimizer.pt\"))\n                    logger.info(\"Saving optimizer states to %s\", last_output_dir)\n\n                    step_file = os.path.join(last_output_dir, 'step_file.txt')\n                    with open(step_file, 'w', encoding='utf-8') as stepf:\n                        stepf.write(str(global_step) + '\\n')\n                    \n\n            if args.max_steps > 0 and global_step > args.max_steps:\n                break\n        if args.max_steps > 0 and global_step > args.max_steps:\n            break\n\n    return global_step, tr_loss / global_step",
        "evaluate": "def evaluate(args, model, tokenizer, prefix=\"\", eval_when_training=False):\n    # Loop to handle MNLI double evaluation (matched, mis-matched)\n    eval_output_dir = args.output_dir\n\n    eval_dataset = MethodDataset(tokenizer, args, file_type='dev', block_size=args.block_size)\n\n    if not os.path.exists(eval_output_dir) and args.local_rank in [-1, 0]:\n        os.makedirs(eval_output_dir)\n\n    args.eval_batch_size = args.per_gpu_eval_batch_size * max(1, args.n_gpu)\n    # Note that DistributedSampler samples randomly\n    eval_sampler = SequentialSampler(eval_dataset)\n    eval_dataloader = DataLoader(eval_dataset, sampler=eval_sampler, batch_size=args.eval_batch_size)\n\n    # multi-gpu evaluate\n    if args.n_gpu > 1 and eval_when_training is False:\n        model = torch.nn.DataParallel(model)\n\n    # Eval!\n    #logger.info(\"***** Running evaluation {} *****\".format(prefix))\n    #logger.info(\"  Num examples = %d\", len(eval_dataset))\n    #logger.info(\"  Batch size = %d\", args.eval_batch_size)\n    eval_loss = 0.0\n    nb_eval_steps = 0\n    model.eval()\n    \n    for step, (batch, token_labels) in enumerate(eval_dataloader):\n\n        inputs = batch.to(args.device)\n        attn_mask = torch.tensor(token_labels.clone().detach() != 0, dtype=torch.uint8, device=args.device)\n        loss_mask = torch.tensor(token_labels.clone().detach() == 2, dtype=torch.uint8, device=args.device)\n        with torch.no_grad():\n            outputs = model(inputs, attention_mask=attn_mask)\n            logits = outputs[0]\n            labels = inputs\n            shift_logits = logits[..., :-1, :].contiguous()\n            shift_labels = labels[..., 1:].contiguous()\n            # Flatten the tokens\n            loss_fct = CrossEntropyLoss()\n            flatten_shift_loss_mask = loss_mask[..., :-1].contiguous().view(-1)\n            ids = torch.nonzero(flatten_shift_loss_mask).view(-1)\n            loss = loss_fct(shift_logits.view(-1, shift_logits.size(-1))[ids], shift_labels.view(-1)[ids])\n            eval_loss += loss.mean().item()\n        \n        if step % args.logging_steps == 0:\n            logger.info(f\"Eval steps: {step}\")\n        nb_eval_steps += 1\n\n        # inputs = batch.to(args.device)\n        # attn_mask = torch.tensor(token_labels.clone().detach() != 0, dtype=torch.uint8, device=args.device)\n        # loss_mask = torch.tensor(token_labels.clone().detach() == 2, dtype=torch.uint8, device=args.device)\n        # with torch.no_grad():\n        #     outputs = model(inputs, attention_mask=attn_mask, labels=inputs, loss_mask=loss_mask)\n        #     loss = outputs[0]\n        #     eval_loss += loss.mean().item()\n        # nb_eval_steps += 1\n\n    eval_loss = eval_loss / nb_eval_steps\n    perplexity = torch.exp(torch.tensor(eval_loss))\n\n    result = {\n        \"perplexity\": float(perplexity)\n    }\n\n    output_eval_file = os.path.join(eval_output_dir, prefix, \"eval_results.txt\")\n    with open(output_eval_file, \"w\") as writer:\n        #logger.info(\"***** Eval results {} *****\".format(prefix))\n        for key in sorted(result.keys()):\n            #logger.info(\"  %s = %s\", key, str(result[key]))\n            writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n\n    return result",
        "eval_bleu": "def eval_bleu(args, model, tokenizer, file_type='test', num=20000):\n    dataset = MethodDataset(tokenizer, args, file_type='test', block_size=args.block_size, mode='test')\n    test_sampler = SequentialSampler(dataset)\n    test_dataloader = DataLoader(dataset, sampler=test_sampler, batch_size=1)\n    model.to(args.device)\n    model.zero_grad()\n    model.eval()\n\n    preds = []\n    for step, (batch, token_labels) in enumerate(test_dataloader):\n        if step >= num:\n            break\n        inputs = batch.to(args.device)\n        max_gen_len = min(256, args.block_size-inputs.shape[1]-1)\n        try:\n            with torch.no_grad():\n                beam_size = 5\n                m = torch.nn.LogSoftmax(dim=-1)\n                outputs = model(inputs, return_dict=True).past_key_values\n                p = []       \n                zero = torch.cuda.LongTensor(1).fill_(0)\n                for i in range(inputs.shape[0]):\n                    past_hidden = tuple(tuple(xx[i:i+1, :].expand(beam_size, -1, -1, -1) for xx in x) for x in outputs)\n                    # past_hidden = [x[:, i:i+1].expand(-1, beam_size, -1, -1, -1) for x in outputs]\n                    beam = Beam(beam_size, tokenizer.bos_token_id, [tokenizer.eos_token_id])\n                    input_ids = None\n                    for _ in range(max_gen_len): \n                        if beam.done():\n                            break\n                        input_ids = beam.getCurrentState()    \n                        transformer_outputs = model(input_ids, past_key_values=past_hidden, return_dict=True)\n                        out = m(transformer_outputs.logits[:, -1, :]).data\n                        beam.advance(out)\n                        past_hidden = tuple(tuple(xx.data.index_select(0, beam.getCurrentOrigin()) for xx in x) for x in transformer_outputs.past_key_values)\n                        # past_hidden = [x.data.index_select(1, beam.getCurrentOrigin()) for x in transformer_outputs[1]]\n                    hyp = beam.getHyp(beam.getFinal())\n                    pred = beam.buildTargetTokens(hyp)[:beam_size]\n\n                    pred = [torch.cat([x.view(-1) for x in p]+[zero]*(max_gen_len-len(p))).view(1,-1) for p in pred]\n                    p.append(torch.cat(pred, 0).unsqueeze(0))\n                p = torch.cat(p, 0)\n                for pred in p:\n                    t = pred[0].cpu().numpy()\n                    t = list(t)\n                    if 0 in t:\n                        t = t[:t.index(0)]\n                    text = tokenizer.decode(t, clean_up_tokenization_spaces=False).rstrip(\"</s>\")\n                    # print(text)\n                    preds.append(text)\n        except Exception:\n            preds.append(\"\")\n        \n        if step % args.logging_steps == 0:\n            logger.info(f\"{step} are done!\")\n    \n    golds = []\n    datafile = os.path.join(args.data_dir, f\"{file_type}.jsonl\")\n    datas = open(datafile).readlines()\n    for x in datas[:num]:\n        x = json.loads(x)\n        golds.append(x[\"body\"])\n    \n    # assert len(preds) == len(golds)\n\n    def post_process(code):\n        code = code.replace(\"<EOL>\", \"\\n\").replace(\"<INDENT>\", \" \").replace(\"<DEDENT>\", \" \")\n        code = code.replace(\"<NUM_LIT>\", \"0\").replace(\"<STR_LIT>\", \"\").replace(\"<CHAR_LIT>\", \"\")\n        pattern = re.compile(r\"<(STR|NUM|CHAR)_LIT:(.*?)>\", re.S)\n        lits = re.findall(pattern, code)\n        for lit in lits:\n            code = code.replace(f\"<{lit[0]}_LIT:{lit[1]}>\", lit[1])\n        return \" \".join(code.split())\n\n    ES = []\n    with open(os.path.join(args.output_dir, f\"{file_type}.output\"), 'w') as f, open(os.path.join(args.output_dir, f\"{file_type}.gold\"), 'w') as f1:\n        for pred, gold in zip(preds, golds):\n            pred = post_process(pred)\n            gold = post_process(gold)\n            f.write(pred+'\\n')\n            f1.write(gold+'\\n')\n            ES.append(fuzz.ratio(pred, gold))\n\n    bleu_score = round(_bleu(os.path.join(args.output_dir, f\"{file_type}.gold\"), os.path.join(args.output_dir, f\"{file_type}.output\")), 2)\n    ES = round(np.mean(ES), 2)\n    print(bleu_score, ES)",
        "post_process": "def post_process(code):\n        code = code.replace(\"<EOL>\", \"\\n\").replace(\"<INDENT>\", \" \").replace(\"<DEDENT>\", \" \")\n        code = code.replace(\"<NUM_LIT>\", \"0\").replace(\"<STR_LIT>\", \"\").replace(\"<CHAR_LIT>\", \"\")\n        pattern = re.compile(r\"<(STR|NUM|CHAR)_LIT:(.*?)>\", re.S)\n        lits = re.findall(pattern, code)\n        for lit in lits:\n            code = code.replace(f\"<{lit[0]}_LIT:{lit[1]}>\", lit[1])\n        return \" \".join(code.split())",
        "main": "def main():\n    parser = argparse.ArgumentParser()\n\n    ## Required parameters\n    parser.add_argument(\"--data_dir\", default=None, type=str, required=True,\n                        help=\"The input data path.\")\n    parser.add_argument(\"--output_dir\", default=None, type=str, required=True,\n                        help=\"The output directory where the model predictions and checkpoints will be written.\")\n\n    ## Other parameters\n    parser.add_argument(\"--model_type\", default=\"gpt2\", type=str,\n                        help=\"The model architecture to be fine-tuned.\")\n    parser.add_argument(\"--pretrain_dir\", default=\"\", type=str,\n                        help=\"The output directory where the model predictions and checkpoints will be written.\")\n    parser.add_argument(\"--config_dir\", type=str,\n                        help=\"config name. Required when training from scratch\")\n    parser.add_argument(\"--tokenizer_dir\", type=str,\n                        help=\"Pre-trained tokenizer dir. Required when training from scratch\")\n    parser.add_argument(\"--load_name\", type=str, default=\"pretrained\", \n                        help=\"Load pretrained model name\")\n    parser.add_argument(\"--lit_file\", type=str,\n                        help=\"literals json file\")\n\n    parser.add_argument(\"--mlm\", action='store_true',\n                        help=\"Train with masked-language modeling loss instead of language modeling.\")\n    parser.add_argument(\"--mlm_probability\", type=float, default=0.15,\n                        help=\"Ratio of tokens to mask for masked language modeling loss\")\n\n    parser.add_argument(\"--cache_dir\", default=\"\", type=str,\n                        help=\"Optional directory to store the pre-trained models downloaded from s3 (instread of the default one)\")\n    parser.add_argument(\"--block_size\", default=1024, type=int,\n                        help=\"Optional input sequence length after tokenization.\"\n                             \"The training dataset will be truncated in block of this size for training.\"\n                             \"Default to the model max input length for single sentence inputs (take into account special tokens).\")\n    parser.add_argument(\"--do_train\", action='store_true',\n                        help=\"Whether to run training.\")\n    parser.add_argument(\"--do_eval\", action='store_true',\n                        help=\"Whether to run eval on the dev set.\")\n    parser.add_argument(\"--do_infer\", action='store_true',\n                        help=\"Whether to run inference on test set.\")\n    parser.add_argument(\"--evaluate_during_training\", action='store_true',\n                        help=\"Run evaluation during training at each logging step.\")\n    parser.add_argument(\"--do_lower_case\", action='store_true',\n                        help=\"Set this flag if you are using an uncased model.\")\n\n    parser.add_argument(\"--per_gpu_train_batch_size\", default=2, type=int,\n                        help=\"Batch size per GPU/CPU for training.\")\n    parser.add_argument(\"--per_gpu_eval_batch_size\", default=4, type=int,\n                        help=\"Batch size per GPU/CPU for evaluation.\")\n    parser.add_argument('--gradient_accumulation_steps', type=int, default=1,\n                        help=\"Number of updates steps to accumulate before performing a backward/update pass.\")\n    parser.add_argument(\"--learning_rate\", default=5e-5, type=float,\n                        help=\"The initial learning rate for Adam.\")\n    parser.add_argument(\"--weight_decay\", default=0.0, type=float,\n                        help=\"Weight deay if we apply some.\")\n    parser.add_argument(\"--adam_epsilon\", default=1e-8, type=float,\n                        help=\"Epsilon for Adam optimizer.\")\n    parser.add_argument(\"--max_grad_norm\", default=1.0, type=float,\n                        help=\"Max gradient norm.\")\n    parser.add_argument(\"--num_train_epochs\", default=1.0, type=float,\n                        help=\"Total number of training epochs to perform.\")\n    parser.add_argument(\"--max_steps\", default=-1, type=int,\n                        help=\"If > 0: set total number of training steps to perform. Override num_train_epochs.\")\n    parser.add_argument(\"--warmup_steps\", default=0, type=int,\n                        help=\"Linear warmup over warmup_steps.\")\n\n    parser.add_argument('--logging_steps', type=int, default=10,\n                        help=\"Log every X updates steps.\")\n    parser.add_argument('--save_steps', type=int, default=50,\n                        help=\"Save checkpoint every X updates steps.\")\n    parser.add_argument('--save_total_limit', type=int, default=None,\n                        help='Limit the total amount of checkpoints, delete the older checkpoints in the output_dir, does not delete by default')\n    parser.add_argument(\"--eval_all_checkpoints\", action='store_true',\n                        help=\"Evaluate all checkpoints starting with the same prefix as model_name_or_path ending and ending with step number\")\n    parser.add_argument(\"--no_cuda\", action='store_true',\n                        help=\"Avoid using CUDA when available\")\n    parser.add_argument('--overwrite_output_dir', action='store_true',\n                        help=\"Overwrite the content of the output directory\")\n    parser.add_argument('--overwrite_cache', action='store_true',\n                        help=\"Overwrite the cached training and evaluation sets\")\n    parser.add_argument('--seed', type=int, default=42,\n                        help=\"random seed for initialization\")\n\n    parser.add_argument('--fp16', action='store_true',\n                        help=\"Whether to use 16-bit (mixed) precision (through NVIDIA apex) instead of 32-bit\")\n    parser.add_argument('--fp16_opt_level', type=str, default='O1',\n                        help=\"For fp16: Apex AMP optimization level selected in ['O0', 'O1', 'O2', and 'O3'].\"\n                             \"See details at https://nvidia.github.io/apex/amp.html\")\n    parser.add_argument(\"--local_rank\", type=int, default=-1,\n                        help=\"For distributed training: local_rank\")\n    parser.add_argument(\"--node_index\", type=int, default=-1,\n                        help=\"node index if multi-node running\")    \n    parser.add_argument(\"--gpu_per_node\", type=int, default=-1,\n                        help=\"num of gpus per node\")  \n    parser.add_argument('--server_ip', type=str, default='', help=\"For distant debugging.\")\n    parser.add_argument('--server_port', type=str, default='', help=\"For distant debugging.\")\n\n    parser.add_argument('--log_file', type=str, default='')\n    parser.add_argument('--tensorboard_dir', type=str)  \n    \n    pool = None\n    args = parser.parse_args()\n\n    # args.output_dir = os.path.join(args.output_dir, args.dataset)\n\n    logger.warning(\"local_rank: %d, node_index: %d, gpu_per_node: %d\"%(args.local_rank, args.node_index, args.gpu_per_node))\n    # Setup CUDA, GPU & distributed training\n    if args.local_rank == -1 or args.no_cuda:\n        device = torch.device(\"cuda\" if torch.cuda.is_available() and not args.no_cuda else \"cpu\")\n        args.n_gpu = torch.cuda.device_count()\n    else:  # Initializes the distributed backend which will take care of sychronizing nodes/GPUs\n        torch.cuda.set_device(args.local_rank)\n        device = torch.device(\"cuda\", args.local_rank)\n        torch.distributed.init_process_group(backend='nccl')\n        args.local_rank += args.node_index * args.gpu_per_node\n        args.n_gpu = 1\n    args.device = device\n\n    # Setup logging\n    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(name)s -   %(message)s',\n                        datefmt='%m/%d/%Y %H:%M:%S',\n                        level=logging.INFO if args.local_rank in [-1, 0] else logging.WARN)\n    logger.warning(\"Process rank: %s, device: %s, n_gpu: %s, distributed training: %s, 16-bits training: %s, world size: %s\",\n                   args.local_rank, device, args.n_gpu, bool(args.local_rank != -1), args.fp16,\n                   torch.distributed.get_world_size() if args.local_rank != -1 else 1)\n\n    if args.local_rank not in [-1, 0]:\n        torch.distributed.barrier()\n    if not os.path.exists(args.output_dir):\n        os.makedirs(args.output_dir)\n    if args.local_rank == 0:\n        torch.distributed.barrier()\n\n    fh = logging.FileHandler(args.log_file)\n    logger.addHandler(fh)\n\n    # Set seed\n    set_seed(args)\n\n    # Load pretrained model and tokenizer\n    if args.local_rank not in [-1, 0]:\n        torch.distributed.barrier()  # Barrier to make sure only the first process in distributed training download model & vocab\n\n    args.start_step = 0\n    checkpoint_last = os.path.join(args.output_dir, 'checkpoint-last')\n    if args.do_train and os.path.exists(checkpoint_last) and os.listdir(checkpoint_last):\n        args.pretrain_dir = os.path.join(checkpoint_last)\n        args.config_name = os.path.join(checkpoint_last, 'config.json')\n\n        step_file = os.path.join(checkpoint_last, 'step_file.txt')\n        if os.path.exists(step_file):\n            with open(step_file, encoding='utf-8') as stepf:\n                args.start_step = int(stepf.readlines()[0].strip())\n\n        logger.info(\"reload model from {}, resume from {} steps\".format(checkpoint_last, args.start_step))\n\n    special_tokens = get_special_tokens(args.lit_file)\n\n    # Load pre-trained model\n    config_class, model_class, tokenizer_class = MODEL_CLASSES[args.model_type]\n    pretrained = args.pretrain_dir\n    if pretrained:\n        tokenizer = tokenizer_class.from_pretrained(pretrained, do_lower_case=args.do_lower_case, bos_token='<s>', eos_token='</s>', pad_token='<pad>', unk_token='<|UNKNOWN|>', additional_special_tokens=special_tokens)\n        logger.info(tokenizer.encode(\"<s> hello world<EOL><INDENT><pad> </s>\"))\n        model = model_class.from_pretrained(pretrained)\n        model.resize_token_embeddings(len(tokenizer))\n        update_config(model, tokenizer)\n        logger.info(model.config)\n    else:\n        tokenizer = tokenizer_class.from_pretrained(args.tokenizer_dir, bos_token='<s>', eos_token='</s>', pad_token='<pad>', unk_token='<|UNKNOWN|>', additional_special_tokens=special_tokens)\n        args.vocab_size = tokenizer.vocab_size\n        config = config_class.from_pretrained(args.config_dir)\n        model = model_class(config)\n        model.resize_token_embeddings(len(tokenizer))\n        update_config(model, tokenizer)\n\n    model_parameters = model.parameters()\n    num_params = sum([np.prod(p.size()) for p in model_parameters])\n    logger.info(f\"Model has a total of {num_params} trainable parameters\")\n\n    if args.local_rank == 0:\n        torch.distributed.barrier()  # End of barrier to make sure only the first process in distributed training download model & vocab\n\n    logger.info(\"Training/evaluation parameters %s\", args)\n\n    # Training\n    if args.do_train:\n        train_dataset = MethodDataset(tokenizer, args, file_type='train', block_size=args.block_size)\n\n        global_step, tr_loss = train(args, train_dataset, model, tokenizer, fh, pool)\n        logger.info(\" global_step = %s, average loss = %s\", global_step, tr_loss)\n\n    if args.do_infer:\n        eval_bleu(args, model, tokenizer)"
    }
}